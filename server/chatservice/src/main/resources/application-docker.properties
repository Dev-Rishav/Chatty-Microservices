# Docker Configuration for Local Development
spring.application.name=chatservice

# Server Configuration
server.port=${PORT:8085}

# Eureka Configuration
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://eureka-server:8761/eureka}
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.instance.hostname=${HOSTNAME:localhost}
eureka.instance.prefer-ip-address=false

# Database Configuration
spring.jpa.hibernate.ddl-auto=${DB_DDL_AUTO:update}
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000

# Logging Configuration
logging.level.com.chatty=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,env
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Development friendly settings
server.error.include-stacktrace=always
server.error.include-message=always

#Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}

spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
    username="${KAFKA_API_KEY}" \
    password="${KAFKA_API_SECRET}";

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.kafka.consumer.group-id=${KAFKA_GROUP_ID}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#Redis Configuration
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.username=${REDIS_USERNAME:default}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=5000ms
spring.data.redis.lettuce.pool.max-active=5
spring.data.redis.lettuce.pool.max-idle=3
spring.data.redis.lettuce.pool.min-idle=1

#Cloudinary Configuration
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME:default}
cloudinary.api-key=${CLOUDINARY_API_KEY:default}    
cloudinary.api-secret=${CLOUDINARY_API_SECRET:default}


# === gRPC Client Config with Env Variables ===
spring.grpc.client.channels.user.address=${GRPC_USER_SERVICE_ADDRESS}
spring.grpc.client.channels.user.negotiationType=PLAINTEXT

spring.grpc.client.channels.auth.address=${GRPC_AUTH_SERVICE_ADDRESS}
spring.grpc.client.channels.auth.negotiationType=PLAINTEXT

spring.grpc.client.channels.contact.address=${GRPC_CONTACT_SERVICE_ADDRESS}
spring.grpc.client.channels.contact.negotiationType=PLAINTEXT

logging.level.org.springframework.boot.context.config=DEBUG
