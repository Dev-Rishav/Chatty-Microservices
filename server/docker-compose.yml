version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatty-postgres
    environment:
      POSTGRES_DB: chatty_db
      POSTGRES_USER: chatty_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chatty_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatty_user -d chatty_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatty-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: chatty-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    restart: unless-stopped
    networks:
      - chatty-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chatty-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Eureka Server (Service Discovery)
  eureka-server:
    build:
      context: ./EurekaServer
      dockerfile: Dockerfile
    container_name: chatty-eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Auth Service
  auth-service:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    container_name: chatty-auth-service
    depends_on:
      - postgres
      - redis
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatty_db
      - DB_USERNAME=chatty_user
      - DB_PASSWORD=${DB_PASSWORD:-chatty_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # User Service
  user-service:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    container_name: chatty-user-service
    depends_on:
      - postgres
      - redis
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatty_db
      - DB_USERNAME=chatty_user
      - DB_PASSWORD=${DB_PASSWORD:-chatty_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Chat Service
  chat-service:
    build:
      context: ./chatservice
      dockerfile: Dockerfile
    container_name: chatty-chat-service
    depends_on:
      - postgres
      - redis
      - kafka
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatty_db
      - DB_USERNAME=chatty_user
      - DB_PASSWORD=${DB_PASSWORD:-chatty_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Notification Service
  notification-service:
    build:
      context: ./notificationservice
      dockerfile: Dockerfile
    container_name: chatty-notification-service
    depends_on:
      - postgres
      - redis
      - kafka
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatty_db
      - DB_USERNAME=chatty_user
      - DB_PASSWORD=${DB_PASSWORD:-chatty_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # Payment Service
  payment-service:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    container_name: chatty-payment-service
    depends_on:
      - postgres
      - redis
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatty_db
      - DB_USERNAME=chatty_user
      - DB_PASSWORD=${DB_PASSWORD:-chatty_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
    ports:
      - "8084:8084"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

  # API Gateway
  api-gateway:
    build:
      context: ./Api_Gateway
      dockerfile: Dockerfile
    container_name: chatty-api-gateway
    depends_on:
      - eureka-server
      - auth-service
      - user-service
      - chat-service
      - notification-service
      - payment-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
    ports:
      - "8085:8085"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - chatty-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:

networks:
  chatty-network:
    driver: bridge
